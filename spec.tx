title { `Specification of BigWebThing` }
author { `True Ghiassi` }
body {
`BigWebThing is a programming language, interpreter and tooling for creating and sharing programmable documents.`
header 1 num langSpec { `Language specification` }
header 2 { `Types` }
`The interpreter checks the types for consistency before trying to run the program. The built-in types are:`
list {
{ `Signed and unsigned integers in these sizes: 8, 16, 32, 64, 128.` }
{ `Floating point numbers in sizes 32 and 64.` }
{ `Unicode characters.` }
{ `Unicode strings.` }
{ `Tuple. Its length and the order of the elements are part of the type. The elements can be any mixture of types.` }
{ `Array. All the elements are the same type, and the length is part of the type and is fixed.` }
{ `Vector. Like an array, but can be of a variable length.` }
{ `Map. For key-value data. All the keys are one type and all the values are one type.` }
{ `Type. The type of a type. A type is a set of values, i.e. a set of things that are not types.` }
{ `Function. Its type is a list of input types and an output type.` }
{ `Set. An unordered collection of values of a particular type.` }
{ `Atom. Any unused bit of the namespace, like "Red" (without quotes) or "tt" etc. Atoms can also include other types, like "Red 2" or "age 24 9.66".` }
}
`A custom type can be created by assigning a name to a set of values. A simple example is that a 'Bool' type could be defined as the set of the atoms 'True' and 'False'.`
header 2 { `All data is immutable` }
header 2 { `Python-like syntax` }
header 2 { `Separation of pure and impure code` }
`There are two different ways of defining functions, one for those that do IO and another for doing pure computations. It is not possible to call IO functions from inside pure functions.`
header 2 { `A very clean namespace` }
list {
{ `There can be many namespaces within a file.` }
{ `There are few restrictions on the characters allowed in names.` }
{ `There is a very small standard library.` }
}
header 1 num langInt { `Language interpreter` }
`It takes a BWT program and builds a document from it.`
header 1 num publicMsg { `Public messages` }
`Upload a message to a public HTTP server.`
header 1 num secretMsg { `Secret messages` }
`Send a secret message to another member.`
header 2 num invite { `(Un)invite` }
`Invite someone to be a member, or revoke an existing invitation.`
header 2 num search { `Search` }
`Ask someone else for information on a topic. This is done by sending some tags and a search string as JSON to the all the known contacts. These respond with what they know.`
header 1 num editData { `Edit personal data` }
`Everyone keeps their own data, and can edit it as they wish.`
}
