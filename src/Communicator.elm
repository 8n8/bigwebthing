port module Communicator exposing
    ( Model
    , Msg
    , initCmd
    , initModel
    , subscriptions
    , update
    , view
    )

import Element
import Element.Input



-- Client-to-client API
-- ====================
--
-- Top-level API
-- -------------
--
-- These are the message formats that are acceptable between clients.
-- Remember (from the server API spec set out in the README), that
-- the server already requires that messages between clients are
-- signed by the sender, so extra authentication is not necessary.
--
-- 1. Request public encryption key:
-- + 0x01
--
-- 2. Public encryption key:
-- + 0x02
-- + 32 bytes: public encryption key
--
-- 3. Encrypted blob:
-- + 0x03
-- + 8 bytes: nonce
-- + the blob
--
--
-- Sub-level API
-- -------------
--
-- These are the message formats that are acceptable inside the
-- encrypted blobs (see 3 above).
-- ...
-- What this module does
-- =====================
--
-- It sends all the HumanMsgs that were generated by the Generator
-- module and dumped in the cache.
--
-- It downloads all the responses and dumps them in the cache ready
-- for the importer.
--
-- It is nearly all in Javascript, because there is a lot of IO, and
-- a lot of crypto.


type alias Model =
    Maybe String


update : Msg -> Model -> ( Model, Cmd Msg )
update msg model =
    case msg of
        Communicate ->
            ( model, communicate () )

        Error error ->
            ( Just error, Cmd.none )


initModel : Model
initModel =
    Nothing


view : Model -> Element.Element Msg
view model =
    case model of
        Just err ->
            Element.text err

        Nothing ->
            Element.Input.button []
                { onPress = Just Communicate
                , label = Element.text "Send and receive"
                }


port communicationError : (String -> msg) -> Sub msg


subscriptions : Sub Msg
subscriptions =
    communicationError Error


port communicate : () -> Cmd msg


initCmd : Cmd msg
initCmd =
    Cmd.none


type Msg
    = Communicate
    | Error String
